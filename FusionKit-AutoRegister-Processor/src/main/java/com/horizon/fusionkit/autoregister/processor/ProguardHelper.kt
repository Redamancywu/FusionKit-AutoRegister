package com.horizon.fusionkit.autoregister.processor

import com.squareup.kotlinpoet.FileSpec
import java.io.OutputStreamWriter

/**
 * ProGuard/R8 混淆规则生成器
 * 为自动注册的服务生成混淆规则，确保运行时能正确访问
 */
object ProguardHelper {
    
    /**
     * 生成混淆规则文件
     */
    fun generateProguardRules(
        codeGenerator: com.google.devtools.ksp.processing.CodeGenerator,
        interfaceToEntries: Map<String, List<ServiceEntry>>
    ) {
        val rules = buildString {
            appendLine("# AutoRegister ProGuard Rules")
            appendLine("# Generated by FusionKit AutoRegister Processor")
            appendLine()
            
            // 保持所有被注册的服务类
            appendLine("# Keep all registered service implementations")
            interfaceToEntries.values.flatten().forEach { entry ->
                appendLine("-keep class ${entry.className} { <init>(); }")
                appendLine("-keepclassmembers class ${entry.className} { public <methods>; }")
            }
            appendLine()
            
            // 保持生成的 Provider 类
            appendLine("# Keep generated provider classes")
            interfaceToEntries.keys.forEach { interfaceName ->
                val packageName = interfaceName.substringBeforeLast('.', "")
                val simpleInterfaceName = interfaceName.substringAfterLast('.')
                val providersName = "${simpleInterfaceName}Providers"
                
                appendLine("-keep class $packageName.$providersName { *; }")
                appendLine("-keepclassmembers class $packageName.$providersName { public <methods>; }")
            }
            appendLine()
            
            // 保持接口和实现关系
            appendLine("# Keep interface-implementation relationships")
            interfaceToEntries.forEach { (interfaceName, entries) ->
                entries.forEach { entry ->
                    appendLine("-keep class ${entry.className} implements $interfaceName { *; }")
                }
            }
            appendLine()
            
            // 保持注解（如果使用反射访问注解）
            appendLine("# Keep annotations")
            appendLine("-keep @interface com.horizon.fusionkit.autoregister.processor.AutoRegister")
            appendLine("-keepclassmembers @com.horizon.fusionkit.autoregister.processor.AutoRegister class * { *; }")
            appendLine()
            
            // 优化规则：避免重复混淆
            appendLine("# Optimization rules")
            appendLine("-dontoptimize")
            appendLine("-dontobfuscate")
            appendLine("-dontpreverify")
            appendLine()
            
            // 特定于 Kotlin 的规则
            appendLine("# Kotlin-specific rules")
            appendLine("-keep class kotlin.Metadata { *; }")
            appendLine("-dontwarn kotlin.**")
        }
        
        val file = codeGenerator.createNewFile(
            dependencies = com.google.devtools.ksp.processing.Dependencies.ALL_FILES,
            packageName = "",
            fileName = "proguard-autoregister.pro"
        )
        
        OutputStreamWriter(file).use { writer ->
            writer.write(rules)
        }
    }
    
    /**
     * 生成 R8 规则（Android 专用）
     */
    fun generateR8Rules(
        codeGenerator: com.google.devtools.ksp.processing.CodeGenerator,
        interfaceToEntries: Map<String, List<ServiceEntry>>
    ) {
        val rules = buildString {
            appendLine("# R8 Rules for AutoRegister")
            appendLine("# Generated by FusionKit AutoRegister Processor")
            appendLine()
            
            // 保持所有服务实现
            appendLine("# Keep service implementations")
            interfaceToEntries.values.flatten().forEach { entry ->
                appendLine("-keep class ${entry.className}")
                appendLine("-keepclassmembers class ${entry.className} { public <methods>; }")
            }
            appendLine()
            
            // 保持 Provider 访问方法
            appendLine("# Keep provider access methods")
            interfaceToEntries.keys.forEach { interfaceName ->
                val packageName = interfaceName.substringBeforeLast('.', "")
                val simpleInterfaceName = interfaceName.substringAfterLast('.')
                val providersName = "${simpleInterfaceName}Providers"
                
                appendLine("-keep class $packageName.$providersName")
                appendLine("-keepclassmembers class $packageName.$providersName { 
                    public static *** all();
                    public static *** byName();
                    public static *** byType();
                    public static *** get(...);
                    public static *** getBest(...);
                    public static *** getAll(...);
                }")
            }
        }
        
        val file = codeGenerator.createNewFile(
            dependencies = com.google.devtools.ksp.processing.Dependencies.ALL_FILES,
            packageName = "",
            fileName = "r8-autoregister.pro"
        )
        
        OutputStreamWriter(file).use { writer ->
            writer.write(rules)
        }
    }
}